import streamlit as st
import pandas as pd
import os
import json
from data_processor import (
    load_data, 
    extract_all_symptoms, 
    get_answers_by_symptom,
    get_treatment_answers,
    group_answers
)

# Set page configuration
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
    page_icon="üè•",
    layout="wide"
)

# Custom CSS to improve the UI
st.markdown("""
<style>
    .stSelectbox label {
        font-size: 1.2rem;
        font-weight: bold;
    }
    .recommendation-box {
        background-color: #f0f8ff;
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
    }
    .recommendation-title {
        color: #4682b4;
        font-size: 1.3rem;
        font-weight: bold;
    }
    .recommendation-item {
        margin-bottom: 8px;
        padding-left: 20px;
    }
    .warning-box {
        margin-top: 10px;
        padding: 8px 15px;
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        border-radius: 4px;
        color: #856404;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Define default paths
@st.cache_data
def get_default_paths():
    """Get default file paths based on the current working directory"""
    # Get the directory where this script is located
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Define paths to the data files
    excel_path = os.path.join(current_dir, "assets", "dataset.xlsx")
    csv_path = os.path.join(current_dir, "assets", "symptoms.csv")
    
    # Ensure the assets directory exists
    assets_dir = os.path.join(current_dir, "assets")
    if not os.path.exists(assets_dir):
        try:
            os.makedirs(assets_dir)
            print(f"Created assets directory: {assets_dir}")
        except Exception as e:
            print(f"Could not create assets directory: {e}")
    
    # Run preprocessing script if recommendation file doesn't exist
    if os.path.exists(excel_path) and not os.path.exists(csv_path):
        try:
            import subprocess
            preprocess_path = os.path.join(current_dir, "preprocess.py")
            if os.path.exists(preprocess_path):
                print("Running preprocessing script to generate recommendations file...")
                subprocess.run(["python", preprocess_path], check=True)
        except Exception as e:
            print(f"Error running preprocessing script: {e}")
    
    # Print paths for debugging
    print(f"Excel path: {excel_path}")
    print(f"CSV path: {csv_path}")
    
    return excel_path, csv_path

# Default recommendations
default_recommendations = [
    "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
    "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÜ",
    "‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå"
]

# Load data
@st.cache_data
def load_cached_data(excel_path, recommendations_path):
    """Cache data loading to improve performance"""
    return load_data(excel_path, recommendations_path)

def main():
    # Set title
    st.title("üè• ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
    
    # Sidebar for file paths and navigation
    with st.sidebar:
        st.header("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # Use default paths or allow custom paths
        default_excel_path, default_csv_path = get_default_paths()
        
        use_default = st.checkbox("‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", value=True)
        
        if use_default:
            excel_path = default_excel_path
            recommendations_path = default_csv_path
        else:
            excel_path = st.text_input("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏£", value=default_excel_path)
            recommendations_path = st.text_input("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", value=default_csv_path)
        
        # Navigation
        st.header("‡πÄ‡∏°‡∏ô‡∏π")
        
        if st.button("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà"):
            st.cache_data.clear()
            st.experimental_rerun()
    
    # Load data
    try:
        df, recommendations_dict = load_cached_data(excel_path, recommendations_path)
        
        # Extract symptoms
        symptoms = extract_all_symptoms(df)
        treatment_answers = get_treatment_answers(df)
        
        # Display recommendation interface
        display_recommendation_interface(df, symptoms, treatment_answers, recommendations_dict)
            
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")

def display_recommendation_interface(df, symptoms, treatment_answers, recommendations_dict):
    """Display the main recommendation interface"""
    # Main interface
    st.markdown("### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    
    # Dropdown for symptom selection
    selected_symptom = st.selectbox(
        "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:", 
        options=symptoms,
        format_func=lambda x: x,
        index=0 if symptoms else None
    )
    
    if selected_symptom:
        # Get answers for this symptom
        answers = get_answers_by_symptom(selected_symptom, df)
        
        if answers:
            grouped_answers = group_answers(answers)
            
            # Create columns for better layout
            st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£")
            
            # Display each group in a separate expander
            for group_name, items in grouped_answers.items():
                with st.expander(f"{group_name}", expanded=True):
                    # Create a selectbox for each group
                    st.selectbox(
                        f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å{group_name}:",
                        options=items,
                        key=f"dropdown_{group_name}"
                    )
            
            # Treatment history always displayed
            if treatment_answers:
                with st.expander("‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", expanded=True):
                    st.selectbox(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤:",
                        options=treatment_answers,
                        key="dropdown_treatment"
                    )
            
            # Recommendations
            st.markdown("### üíä ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
            recs = recommendations_dict.get(selected_symptom, default_recommendations)
            
            for rec in recs:
                if rec and isinstance(rec, str):
                    st.markdown(f"- {rec}")
            
            # Warning message
            st.markdown(
                """
                <div class="warning-box">
                ‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏£‡∏µ‡∏ö‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå
                </div>
                """, 
                unsafe_allow_html=True
            )
                
        else:
            st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ '{selected_symptom}'")

if __name__ == "__main__":
    main()
